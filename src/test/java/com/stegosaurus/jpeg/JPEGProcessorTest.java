package com.stegosaurus.jpeg;

import static org.junit.Assert.assertEquals;

import org.junit.Test;

/**
 * Tests the jpeg processor class.
 * TODO A better source for test data!
 */
public class JPEGProcessorTest {

  /**
   * Monstruous table of data. Subset of a JPEG file, with casts wherever the
   * compiler complained about overflow.
   */
  private static byte[] data = {
    (byte) 0xFF, (byte) 0xD8, (byte) 0xFF,
    (byte) 0xDB, 0x00, 0x43, 0x00, 0x08, 0x06, 0x06, 0x07, 0x06, 0x05,
    0x08, 0x07, 0x07, 0x07, 0x09, 0x09, 0x08, 0x0A, 0x0C, 0x14, 0x0D,
    0x0C, 0x0B, 0x0B, 0x0C, 0x19, 0x12, 0x13, 0x0F, 0x14, 0x1D, 0x1A,
    0x1F, 0x1E, 0x1D, 0x1A, 0x1C, 0x1C, 0x20, 0x24, 0x2E, 0x27, 0x20,
    0x22, 0x2C, 0x23, 0x1C, 0x1C, 0x28, 0x37, 0x29, 0x2C, 0x30, 0x31,
    0x34, 0x34, 0x34, 0x1F, 0x27, 0x39, 0x3D, 0x38, 0x32, 0x3C, 0x2E,
    0x33, 0x34, 0x32, (byte) 0xFF, (byte) 0xDB, 0x00, 0x43, 0x01, 0x09,
    0x09, 0x09, 0x0C, 0x0B, 0x0C, 0x18, 0x0D, 0x0D, 0x18, 0x32, 0x21,
    0x1C, 0x21, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32,
    0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32,
    0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32,
    0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32,
    0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, (byte) 0xFF, (byte) 0xD9
  };

  @Test
  public void testFindMarker() {
    int[] expected = {0, 2, 71, data.length - 2};
    for(int i = 0; i < expected.length; i++) {
      int start = (i > 0 ? expected[i - 1] : -1);
      int result = JPEGProcessor.findMarker(start, data);
      String msg = "Bad return value for find marker.";
      assertEquals(msg, expected[i], result);
    }
  }
}
