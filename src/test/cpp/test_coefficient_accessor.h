#include "../../main/cpp/coefficient_accessor.h"
#include "gtest/gtest.h"

/**
 * Provides JPEG Coefficients from an array given.
 */
class DummyCoefficientsProvider : public JPEGCoefficientsProvider {
 public:
  /**
   * CTOR.
   * @param arr the array that will be provided to any who ask.
   */
  DummyCoefficientsProvider(JBLOCKARRAY arr) : array(arr) { }
  virtual JBLOCKARRAY getCoefficients(const JPEGComponent *comp) const {
    return array;
  }
 private:
  /**
   * The array to return.
   */
  JBLOCKARRAY array;
};

class CoefficientAccessorTest : public ::testing::Test {
 protected:
  /**
   * Create a JBLOCKARRAY containing a sequence of numbers, with the dimensions
   * given.
   * @param rows the number of rows of blocks to have
   * @param cols the number of columns of blocks to have
   * @param h the height of each block, in coefficients
   * @param w the width of each block, in coefficients
   * @param c a pointer to the value of first coefficient. At the end will
   *    point to the value of final coefficient + 1.
   */
  JBLOCKARRAY createBlockArray(int rows, int cols, unsigned int *c) {
    const int size = 64;
    int row, col, i;
    JBLOCKARRAY retval = (JBLOCKARRAY) malloc(sizeof(JCOEF **) * rows);
    for(row = 0; row < rows; row++) {
      retval[row] = new JCOEF[cols][64];
      for(col = 0; col < cols; col++) {
        for(i = 0; i < size; i++, (*c)++) {
          retval[row][col][i] = (*c);
        }
      }
    }
    return retval;
  }

  /**
   * Delete a JBLOCKARRAY allocated by this class.
   * @param blocks the doomed array.
   * @param rows the number of rows in the array
   */
  void deleteBlockArray(JBLOCKARRAY blocks, int rows) {
    int row;
    for(row = 0; row < rows; row++) {
      delete (blocks[row]);
    }
    free(blocks);
  }
};

/**
 * Basic test to ensure that the accessor works, when dealing with a single
 * component.
 */
TEST_F(CoefficientAccessorTest, TestAccessSingleComponent) {
  const int rows = 16, cols = 16, size = 64;
  unsigned int c = 0;
  int i;
  JBLOCKARRAY blocks = createBlockArray(rows, cols, &c);
  DummyCoefficientsProvider p(blocks);
  JPEGComponent comp(cols, rows, cols * 8, rows * 8, 0, &p);
  JPEGComponent* arr[1] = { &comp };
  CoefficientAccessor acc(arr, 1);
  /* Here's the deal: because of the way this stuff was generated, the indeces
   * are equal to their corresponding coefficients, so we can test this pretty
   * easily by getting 10 coefficients. If you think this sounds like it'll
   * allow a ton of bugs through, you're right to think so. That's why there
   * are other tests.
   *
   * The first 4 indices are some special cases:
   *  - The very first one
   *  - The first one in the second column
   *  - The first one in the second row
   *  - The very last one.
   * The other 6 were randomly generated by Python.
   */
  unsigned int tests[10] = { 0, 64, 1024, 16383, 9177, 1342,
                             6600, 16334, 3257, 5906 };
  for(i = 0; i < 10; i++) {
    unsigned int val = tests[i];
    EXPECT_EQ(val, acc.getCoefficient(val));
  }
  EXPECT_EQ(rows * cols * size, acc.getLength());
  deleteBlockArray(blocks, rows);
}

/**
 * Test to ensure that multiple components can be accessed.
 */
TEST_F(CoefficientAccessorTest, TestAccessMultipleComponents) {
  /* We'll have two 16x16 components and one 32x32 component */
  const int rows = 16, cols = 16, size = 64;
  unsigned int c = 0;
  int i;
  JBLOCKARRAY b1 = createBlockArray(rows, cols, &c),
              b2 = createBlockArray(rows, cols, &c),
              b3 = createBlockArray(rows * 2, cols * 2, &c);
  DummyCoefficientsProvider p1(b1), p2(b2), p3(b3);
  JPEGComponent cmp1(cols, rows, cols * 8, rows * 8, 0, &p1),
                cmp2(cols, rows, cols * 8, rows * 8, 1, &p2),
                cmp3(cols, rows, cols *16, rows *16, 2, &p3);
  JPEGComponent *arr[3] = { &cmp1, &cmp2, &cmp3 };
  CoefficientAccessor acc(arr, 3);
  /**
   * The first 4 are the same special cases from the preceding test.
   * The next 4 are more special cases:
   * - The first one in the second component.
   * - The last one in the second component.
   * - The first one in the third component.
   * - The last one altogether.
   * The remaining 12 were randomly generated by Python.
   */
  unsigned int tests[20] = { 0, 64, 1024, 16383, 16384, 32767, 32768, 98303,
                             51230, 77865, 29460, 29624, 17399, 13320, 23006,
                             95958, 65105, 90453, 28042, 22661 };
  for(i = 0; i < 20; i++) {
    unsigned int val = tests[i];
    EXPECT_EQ(val, acc.getCoefficient(val));
  }
  EXPECT_EQ((rows * cols * size) * 2 + (4 * rows * cols * 64),
    acc.getLength());
  deleteBlockArray(b1, rows);
  deleteBlockArray(b2, rows);
  deleteBlockArray(b3, rows * 2);
}
