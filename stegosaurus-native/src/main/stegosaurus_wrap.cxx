/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


/* For good measure */
#include "jpeglib.h"
/* Pull in some includes */
#include "cpp/jpeg_component.h"
#include "cpp/jpeg_image.h"
#include "cpp/coefficient_accessor.h"
#include "cpp/jpeg_context.h"


typedef JOCTET JoctetArray;

SWIGINTERN JoctetArray *new_JoctetArray(int nelements){
  return new JOCTET[nelements];
}
SWIGINTERN void delete_JoctetArray(JoctetArray *self){
  delete [] self;
}
SWIGINTERN JOCTET JoctetArray_getitem(JoctetArray *self,int index){
  return self[index];
}
SWIGINTERN void JoctetArray_setitem(JoctetArray *self,int index,JOCTET value){
  self[index] = value;
}
SWIGINTERN JOCTET *JoctetArray_cast(JoctetArray *self){
  return self;
}
SWIGINTERN JoctetArray *JoctetArray_frompointer(JOCTET *t){
  return (JoctetArray *) t;
}

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_com_stegosaurus_cpp_stegosaurusJNI_new_1JoctetArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  JoctetArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (JoctetArray *)new_JoctetArray(arg1);
  *(JoctetArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_stegosaurus_cpp_stegosaurusJNI_delete_1JoctetArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  JoctetArray *arg1 = (JoctetArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(JoctetArray **)&jarg1; 
  delete_JoctetArray(arg1);
}


SWIGEXPORT jbyte JNICALL Java_com_stegosaurus_cpp_stegosaurusJNI_JoctetArray_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jbyte jresult = 0 ;
  JoctetArray *arg1 = (JoctetArray *) 0 ;
  int arg2 ;
  JOCTET result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(JoctetArray **)&jarg1; 
  arg2 = (int)jarg2; 
  result = JoctetArray_getitem(arg1,arg2);
  jresult = (jbyte)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_stegosaurus_cpp_stegosaurusJNI_JoctetArray_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jbyte jarg3) {
  JoctetArray *arg1 = (JoctetArray *) 0 ;
  int arg2 ;
  JOCTET arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(JoctetArray **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (JOCTET)jarg3; 
  JoctetArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_stegosaurus_cpp_stegosaurusJNI_JoctetArray_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  JoctetArray *arg1 = (JoctetArray *) 0 ;
  JOCTET *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(JoctetArray **)&jarg1; 
  result = (JOCTET *)JoctetArray_cast(arg1);
  *(JOCTET **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_stegosaurus_cpp_stegosaurusJNI_JoctetArray_1frompointer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  JOCTET *arg1 = (JOCTET *) 0 ;
  JoctetArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(JOCTET **)&jarg1; 
  result = (JoctetArray *)JoctetArray_frompointer(arg1);
  *(JoctetArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_stegosaurus_cpp_stegosaurusJNI_new_1JPEGComponent_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jpeg_component_info *arg1 = (jpeg_component_info *) 0 ;
  JPEGCoefficientsProvider *arg2 = (JPEGCoefficientsProvider *) 0 ;
  JPEGComponent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(jpeg_component_info **)&jarg1; 
  arg2 = *(JPEGCoefficientsProvider **)&jarg2; 
  result = (JPEGComponent *)new JPEGComponent((jpeg_component_info const *)arg1,(JPEGCoefficientsProvider const *)arg2);
  *(JPEGComponent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_stegosaurus_cpp_stegosaurusJNI_new_1JPEGComponent_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jint jarg5, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  JDIMENSION arg1 ;
  JDIMENSION arg2 ;
  JDIMENSION arg3 ;
  JDIMENSION arg4 ;
  int arg5 ;
  JPEGCoefficientsProvider *arg6 = (JPEGCoefficientsProvider *) 0 ;
  JDIMENSION *argp1 ;
  JDIMENSION *argp2 ;
  JDIMENSION *argp3 ;
  JDIMENSION *argp4 ;
  JPEGComponent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg6_;
  argp1 = *(JDIMENSION **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null JDIMENSION");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(JDIMENSION **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null JDIMENSION");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(JDIMENSION **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null JDIMENSION");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(JDIMENSION **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null JDIMENSION");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (int)jarg5; 
  arg6 = *(JPEGCoefficientsProvider **)&jarg6; 
  result = (JPEGComponent *)new JPEGComponent(arg1,arg2,arg3,arg4,arg5,(JPEGCoefficientsProvider const *)arg6);
  *(JPEGComponent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_stegosaurus_cpp_stegosaurusJNI_JPEGComponent_1getCoefficients(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  JPEGComponent *arg1 = (JPEGComponent *) 0 ;
  JBLOCKARRAY result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(JPEGComponent **)&jarg1; 
  result = (arg1)->getCoefficients();
  *(JBLOCKARRAY **)&jresult = new JBLOCKARRAY((const JBLOCKARRAY &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_stegosaurus_cpp_stegosaurusJNI_JPEGComponent_1getWidthInBlocks(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  JPEGComponent *arg1 = (JPEGComponent *) 0 ;
  JDIMENSION result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(JPEGComponent **)&jarg1; 
  result = ((JPEGComponent const *)arg1)->getWidthInBlocks();
  *(JDIMENSION **)&jresult = new JDIMENSION((const JDIMENSION &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_stegosaurus_cpp_stegosaurusJNI_JPEGComponent_1getHeightInBlocks(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  JPEGComponent *arg1 = (JPEGComponent *) 0 ;
  JDIMENSION result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(JPEGComponent **)&jarg1; 
  result = ((JPEGComponent const *)arg1)->getHeightInBlocks();
  *(JDIMENSION **)&jresult = new JDIMENSION((const JDIMENSION &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_stegosaurus_cpp_stegosaurusJNI_JPEGComponent_1getDownsampledWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  JPEGComponent *arg1 = (JPEGComponent *) 0 ;
  JDIMENSION result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(JPEGComponent **)&jarg1; 
  result = ((JPEGComponent const *)arg1)->getDownsampledWidth();
  *(JDIMENSION **)&jresult = new JDIMENSION((const JDIMENSION &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_stegosaurus_cpp_stegosaurusJNI_JPEGComponent_1getDownsampledHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  JPEGComponent *arg1 = (JPEGComponent *) 0 ;
  JDIMENSION result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(JPEGComponent **)&jarg1; 
  result = ((JPEGComponent const *)arg1)->getDownsampledHeight();
  *(JDIMENSION **)&jresult = new JDIMENSION((const JDIMENSION &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_stegosaurus_cpp_stegosaurusJNI_JPEGComponent_1getBlockWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  JPEGComponent *arg1 = (JPEGComponent *) 0 ;
  JDIMENSION result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(JPEGComponent **)&jarg1; 
  result = ((JPEGComponent const *)arg1)->getBlockWidth();
  *(JDIMENSION **)&jresult = new JDIMENSION((const JDIMENSION &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_stegosaurus_cpp_stegosaurusJNI_JPEGComponent_1getBlockHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  JPEGComponent *arg1 = (JPEGComponent *) 0 ;
  JDIMENSION result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(JPEGComponent **)&jarg1; 
  result = ((JPEGComponent const *)arg1)->getBlockHeight();
  *(JDIMENSION **)&jresult = new JDIMENSION((const JDIMENSION &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_stegosaurus_cpp_stegosaurusJNI_JPEGComponent_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  JPEGComponent *arg1 = (JPEGComponent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(JPEGComponent **)&jarg1; 
  result = (int)((JPEGComponent const *)arg1)->getIndex();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_stegosaurus_cpp_stegosaurusJNI_JPEGComponent_1getTotalNumberOfCoefficients(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  JPEGComponent *arg1 = (JPEGComponent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(JPEGComponent **)&jarg1; 
  result = (int)(arg1)->getTotalNumberOfCoefficients();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_stegosaurus_cpp_stegosaurusJNI_delete_1JPEGComponent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  JPEGComponent *arg1 = (JPEGComponent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(JPEGComponent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_stegosaurus_cpp_stegosaurusJNI_JPEGCoefficientsProvider_1getCoefficients(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  JPEGCoefficientsProvider *arg1 = (JPEGCoefficientsProvider *) 0 ;
  JPEGComponent *arg2 = (JPEGComponent *) 0 ;
  JBLOCKARRAY result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(JPEGCoefficientsProvider **)&jarg1; 
  arg2 = *(JPEGComponent **)&jarg2; 
  result = ((JPEGCoefficientsProvider const *)arg1)->getCoefficients((JPEGComponent const *)arg2);
  *(JBLOCKARRAY **)&jresult = new JBLOCKARRAY((const JBLOCKARRAY &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_stegosaurus_cpp_stegosaurusJNI_delete_1JPEGCoefficientsProvider(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  JPEGCoefficientsProvider *arg1 = (JPEGCoefficientsProvider *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(JPEGCoefficientsProvider **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_stegosaurus_cpp_stegosaurusJNI_new_1JPEGImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4) {
  jlong jresult = 0 ;
  j_decompress_ptr arg1 ;
  j_compress_ptr arg2 ;
  JOCTET *arg3 = (JOCTET *) 0 ;
  long arg4 ;
  j_decompress_ptr *argp1 ;
  j_compress_ptr *argp2 ;
  JPEGImage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(j_decompress_ptr **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null j_decompress_ptr");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(j_compress_ptr **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null j_compress_ptr");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(JOCTET **)&jarg3; 
  arg4 = (long)jarg4; 
  result = (JPEGImage *)new JPEGImage(arg1,arg2,arg3,arg4);
  *(JPEGImage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_stegosaurus_cpp_stegosaurusJNI_delete_1JPEGImage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  JPEGImage *arg1 = (JPEGImage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(JPEGImage **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_stegosaurus_cpp_stegosaurusJNI_JPEGImage_1readCoefficients(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  JPEGImage *arg1 = (JPEGImage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(JPEGImage **)&jarg1; 
  (arg1)->readCoefficients();
}


SWIGEXPORT jlong JNICALL Java_com_stegosaurus_cpp_stegosaurusJNI_JPEGImage_1writeNew(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  JPEGImage *arg1 = (JPEGImage *) 0 ;
  JPEGImage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(JPEGImage **)&jarg1; 
  result = (JPEGImage *)(arg1)->writeNew();
  *(JPEGImage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_stegosaurus_cpp_stegosaurusJNI_JPEGImage_1doCrop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  JPEGImage *arg1 = (JPEGImage *) 0 ;
  int arg2 ;
  int arg3 ;
  JPEGImage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(JPEGImage **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (JPEGImage *)(arg1)->doCrop(arg2,arg3);
  *(JPEGImage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_stegosaurus_cpp_stegosaurusJNI_JPEGImage_1getComponentCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  JPEGImage *arg1 = (JPEGImage *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(JPEGImage **)&jarg1; 
  result = (int)(arg1)->getComponentCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_stegosaurus_cpp_stegosaurusJNI_JPEGImage_1getComponent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  JPEGImage *arg1 = (JPEGImage *) 0 ;
  int arg2 ;
  JPEGComponent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(JPEGImage **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (JPEGComponent *)(arg1)->getComponent(arg2);
  *(JPEGComponent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_stegosaurus_cpp_stegosaurusJNI_JPEGImage_1getCoefficients_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  JPEGImage *arg1 = (JPEGImage *) 0 ;
  JPEGComponent *arg2 = (JPEGComponent *) 0 ;
  JBLOCKARRAY result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(JPEGImage **)&jarg1; 
  arg2 = *(JPEGComponent **)&jarg2; 
  result = ((JPEGImage const *)arg1)->getCoefficients((JPEGComponent const *)arg2);
  *(JBLOCKARRAY **)&jresult = new JBLOCKARRAY((const JBLOCKARRAY &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_stegosaurus_cpp_stegosaurusJNI_JPEGImage_1getCoefficients_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  JPEGImage *arg1 = (JPEGImage *) 0 ;
  int arg2 ;
  JBLOCKARRAY result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(JPEGImage **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((JPEGImage const *)arg1)->getCoefficients(arg2);
  *(JBLOCKARRAY **)&jresult = new JBLOCKARRAY((const JBLOCKARRAY &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_stegosaurus_cpp_stegosaurusJNI_JPEGImage_1getData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  JPEGImage *arg1 = (JPEGImage *) 0 ;
  JOCTET *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(JPEGImage **)&jarg1; 
  result = (JOCTET *)(arg1)->getData();
  *(JOCTET **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_stegosaurus_cpp_stegosaurusJNI_JPEGImage_1getDataLen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  JPEGImage *arg1 = (JPEGImage *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(JPEGImage **)&jarg1; 
  result = (long)(arg1)->getDataLen();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_stegosaurus_cpp_stegosaurusJNI_new_1CoefficientAccessor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  JPEGImage *arg1 = (JPEGImage *) 0 ;
  CoefficientAccessor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(JPEGImage **)&jarg1; 
  result = (CoefficientAccessor *)new CoefficientAccessor(arg1);
  *(CoefficientAccessor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_stegosaurus_cpp_stegosaurusJNI_new_1CoefficientAccessor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  JPEGComponent **arg1 = (JPEGComponent **) 0 ;
  int arg2 ;
  CoefficientAccessor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(JPEGComponent ***)&jarg1; 
  arg2 = (int)jarg2; 
  result = (CoefficientAccessor *)new CoefficientAccessor(arg1,arg2);
  *(CoefficientAccessor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_stegosaurus_cpp_stegosaurusJNI_delete_1CoefficientAccessor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CoefficientAccessor *arg1 = (CoefficientAccessor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CoefficientAccessor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_stegosaurus_cpp_stegosaurusJNI_CoefficientAccessor_1getCoefficient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  CoefficientAccessor *arg1 = (CoefficientAccessor *) 0 ;
  unsigned int arg2 ;
  JCOEF result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoefficientAccessor **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (arg1)->getCoefficient(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_stegosaurus_cpp_stegosaurusJNI_CoefficientAccessor_1setCoefficient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  CoefficientAccessor *arg1 = (CoefficientAccessor *) 0 ;
  unsigned int arg2 ;
  JCOEF arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoefficientAccessor **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (JCOEF)jarg3; 
  (arg1)->setCoefficient(arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_com_stegosaurus_cpp_stegosaurusJNI_CoefficientAccessor_1getLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CoefficientAccessor *arg1 = (CoefficientAccessor *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoefficientAccessor **)&jarg1; 
  result = (int)(arg1)->getLength();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_stegosaurus_cpp_stegosaurusJNI_CoefficientAccessor_1isDC(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  CoefficientAccessor *arg1 = (CoefficientAccessor *) 0 ;
  unsigned int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoefficientAccessor **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (int)(arg1)->isDC(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_stegosaurus_cpp_stegosaurusJNI_new_1JPEGContext(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  JPEGContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (JPEGContext *)new JPEGContext();
  *(JPEGContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_stegosaurus_cpp_stegosaurusJNI_JPEGContext_1buildImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ;
  JPEGContext *arg1 = (JPEGContext *) 0 ;
  JOCTET *arg2 = (JOCTET *) 0 ;
  long arg3 ;
  JPEGImage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(JPEGContext **)&jarg1; 
  arg2 = *(JOCTET **)&jarg2; 
  arg3 = (long)jarg3; 
  result = (JPEGImage *)(arg1)->buildImage(arg2,arg3);
  *(JPEGImage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_stegosaurus_cpp_stegosaurusJNI_JPEGContext_1destroyImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  JPEGContext *arg1 = (JPEGContext *) 0 ;
  JPEGImage *arg2 = (JPEGImage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(JPEGContext **)&jarg1; 
  arg2 = *(JPEGImage **)&jarg2; 
  (arg1)->destroyImage(arg2);
}


SWIGEXPORT void JNICALL Java_com_stegosaurus_cpp_stegosaurusJNI_delete_1JPEGContext(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  JPEGContext *arg1 = (JPEGContext *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(JPEGContext **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_stegosaurus_cpp_stegosaurusJNI_JPEGImage_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(JPEGCoefficientsProvider **)&baseptr = *(JPEGImage **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

